// open model js

function openModal() {
  document.getElementById("formModal").classList.remove("hidden");
  document.getElementById("formModal").classList.add("flex");
}

function closeModal() {
  document.getElementById("formModal").classList.add("hidden");
  document.getElementById("formModal").classList.remove("flex");
}
document.addEventListener("DOMContentLoaded", () => {
  // 1. Define the data for the cards in a single array
  const requiredDocuments = [
    {
      icon: "ü™™",
      title: "PAN Card",
      description: "Your PAN card is essential for identity verification.",
    },
    {
      icon: "üè†",
      title: "Residence Proof",
      description:
        "Provide proof of your current address for loan eligibility.",
    },
    {
      icon: "üìÑ",
      title: "Bank Statement",
      description: "Submit a 3-month bank statement for quick processing.",
    },
    {
      icon: "üìç",
      title: "Valid Address",
      description:
        "Ensure your address is valid for correspondence and verification.",
    },
  ];

  // 2. Get the container element from the DOM
  const container = document.getElementById("documentation-cards-container");

  // 3. Generate the HTML using map() and inject it into the container
  if (container) {
    container.innerHTML = requiredDocuments
      .map(
        (doc) => `
      <div class="bg-white p-6 rounded-lg shadow text-center hover:shadow-lg hover:bg-green-300 hover:scale-105 transition-all duration-300">
        <div class="w-12 h-12 mx-auto mb-4 bg-green-600 text-white rounded-full flex items-center justify-center text-2xl">
          ${doc.icon}
        </div>
        <h3 class="font-semibold text-lg mb-1">${doc.title}</h3>
        <p class="text-gray-600 text-sm">${doc.description}</p>
      </div>
    `
      )
      .join("");
  }
});
//Promise Section
document.addEventListener("DOMContentLoaded", () => {
  // 1. Define the content for the promise cards in an array
  const promises = [
    {
      icon: "‚ö°",
      title: "Fastest Disbursal",
      description:
        "Get your loan amount credited to your bank account in the <strong>fastest possible time</strong>, so you never have to wait when you need it the most. With RupeeLending, enjoy instant loan approval and <strong>quick fund transfer</strong> directly to your account.",
    },
    {
      icon: "üëç",
      title: "Instant Approval",
      description:
        "Enjoy <strong>instant loan approval</strong> without endless paperwork or waiting. Your loan gets approved <strong>quickly</strong> so you can focus on your <strong>financial goals</strong> without delays.",
    },
    {
      icon: "üõ°Ô∏è",
      title: "100% Secure",
      description:
        "Your information is protected with <strong>industry leading security standards</strong>. We ensure a <strong>safe and confidential loan process</strong> every time, so you can apply with complete peace of mind.",
    },
  ];

  // 2. Get the container element from the DOM
  const container = document.getElementById("promise-cards-container");

  // 3. Generate the HTML using map() and inject it
  if (container) {
    container.innerHTML = promises
      .map(
        (promise) => `
      <div class="bg-white border border-green-200 p-6 rounded-lg shadow hover:shadow-md hover:border-green-400 hover:bg-green-50 transition duration-300">
        <div class="w-12 h-12 mx-auto mb-4 bg-green-600 text-white rounded-full flex items-center justify-center text-2xl">
          ${promise.icon}
        </div>
        <h3 class="font-semibold text-lg mb-2">${promise.title}</h3>
        <p class="text-gray-600 text-sm">
          ${promise.description}
        </p>
      </div>
    `
      )
      .join("");
  }
});

//  testimonial & form

document.addEventListener("DOMContentLoaded", () => {
  // --- CONFIGURATION DATA ---
  const loanFields = {
    loanDetails: [
      {
        name: "monthlySalary",
        label: "Monthly Salary*",
        type: "number",
        placeholder: "Enter Monthly Salary",
      },
      {
        name: "loanAmount",
        label: "Loan Amount*",
        type: "number",
        placeholder: "Enter Loan Amount",
      },
    ],
    personalDetails: [
      {
        name: "fullname",
        label: "Full Name*",
        type: "text",
        placeholder: "Enter Full Name",
      },
      {
        name: "email",
        label: "Email*",
        type: "email",
        placeholder: "Enter Email",
      },
      {
        name: "mobile",
        label: "Mobile Number*",
        type: "tel",
        placeholder: "Enter Mobile Number",
        maxLength: 10,
      },
      {
        name: "panCard",
        label: "PAN Card*",
        type: "text",
        placeholder: "Enter PAN Card",
        maxLength: 10,
        className: "uppercase",
      },
      {
        name: "gender",
        label: "Gender*",
        type: "select",
        options: [
          { value: "1", label: "Male" },
          { value: "2", label: "Female" },
          // { value: "0", label: "Other" },
        ],
      },
      // {
      //   name: "city",
      //   label: "City*",
      //   type: "select",
      //   options: [
      //     { value: "delhi", label: "Delhi" },
      //     { value: "mumbai", label: "Mumbai" },
      //     { value: "bangalore", label: "Bangalore" },
      //     { value: "chennai", label: "Chennai" },
      //     { value: "kolkata", label: "Kolkata" },
      //   ],
      // },
    ],
  };

  const testimonials = [
    {
      img: "assets/testimonial/punnit-raj.jpeg",
      alt: "Puneeth Raz",
      quote: "The support given by Diksha was very excellent.",
      name: "Puneeth Raz",
    },
    {
      img: "assets/testimonial/saikat.jpeg",
      alt: "Saikat Mazumdar",
      quote:
        "Fast and instant approval. Ujjval was very good at guiding the process.",
      name: "Saikat Mazumdar",
    },
    {
      img: "assets/testimonial/mahak.jpeg",
      alt: "Mahak Arya",
      quote:
        "Best service fast service Kanchan arya mam helped me very kindly.",
      name: "Mahak Arya",
    },
  ];

  // --- REUSABLE HTML GENERATION FUNCTIONS ---
  function createFieldHTML(field) {
    const label = `<label class="block mb-1 font-medium text-sm text-gray-700">${field.label}</label>`;
    let input;
    const baseStyle =
      "w-full border border-gray-300 rounded px-3 py-2 focus:outline-none focus:ring-2 focus:ring-[#38773f]";

    if (field.type === "select") {
      const options = field.options
        .map((opt) => `<option value="${opt.value}">${opt.label}</option>`)
        .join("");
      input = `<select name="${
        field.name
      }" class="${baseStyle}" required><option value="" disabled selected>Select ${field.label.replace(
        "*",
        ""
      )}</option>${options}</select>`;
    } else {
      input = `<input type="${field.type}" name="${
        field.name
      }" class="${baseStyle} ${field.className || ""}" placeholder="${
        field.placeholder
      }" ${
        field.maxLength ? `maxlength="${field.maxLength}"` : ""
      } required />`;
    }
    return `<div>${label}${input}</div>`;
  }

  function createTestimonialHTML(review, index) {
    return `
      <div class="review-slide absolute inset-0 transition-opacity duration-700 ease-in-out ${
        index === 0 ? "opacity-100" : "opacity-0"
      } flex flex-col items-center justify-center px-6">
        <img src="${review.img}" alt="${
      review.alt
    }" class="w-20 h-20 rounded-full mb-4" />
        <p class="text-lg italic text-gray-700 mb-2">"${review.quote}"</p>
        <h4 class="text-green-700 font-semibold">${review.name}</h4>
      </div>`;
  }

  // --- RENDER DYNAMIC CONTENT ---
  // Render Form
  document.getElementById("loan-details-container").innerHTML =
    loanFields.loanDetails.map(createFieldHTML).join("");
  document.getElementById("personal-details-container").innerHTML =
    loanFields.personalDetails.map(createFieldHTML).join("");

  // Render Testimonials
  document.getElementById("reviewCarousel").innerHTML = testimonials
    .map(createTestimonialHTML)
    .join("");
  document.getElementById("reviewDotsContainer").innerHTML = testimonials
    .map(
      (_, i) =>
        `<button class="review-dot w-3 h-3 rounded-full ${
          i === 0 ? "bg-green-600" : "bg-green-300"
        }" onclick="goToReview(${i})"></button>`
    )
    .join("");

  // --- EVENT LISTENERS & LOGIC ---
  // Carousel Logic
  let reviewIndex = 0;
  const reviewSlides = document.querySelectorAll(".review-slide");
  const reviewDots = document.querySelectorAll(".review-dot");

  function showReview(index) {
    reviewSlides.forEach((slide, i) => {
      slide.classList.toggle("opacity-100", i === index);
      slide.classList.toggle("opacity-0", i !== index);
    });
    reviewDots.forEach((dot, i) => {
      dot.classList.toggle("bg-green-600", i === index);
      dot.classList.toggle("bg-green-300", i !== index);
    });
    reviewIndex = index;
  }
  window.goToReview = (index) => {
    showReview(index);
  };
  setInterval(() => {
    reviewIndex = (reviewIndex + 1) % reviewSlides.length;
    showReview(reviewIndex);
  }, 3000);
  showReview(0); // Initial call
});

function toggleFAQ(index) {
  const content = document.getElementById(`faq-content-${index}`);
  const icon = document.getElementById(`faq-icon-${index}`);
  const isHidden = content.classList.contains("hidden");

  // Hide all
  document
    .querySelectorAll('[id^="faq-content-"]')
    .forEach((el) => el.classList.add("hidden"));
  document
    .querySelectorAll('[id^="faq-icon-"]')
    .forEach((el) => el.classList.remove("rotate-180"));

  if (isHidden) {
    content.classList.remove("hidden");
    icon.classList.add("rotate-180");
  }
}

// form submission logic start

function submitForm(event) {
  event.preventDefault(); 

  const mobileInput = event.target.querySelector('input[name="mobile"]');
  const panCardInput = event.target.querySelector('input[name="panCard"]');
  const mobile = mobileInput.value.trim();
  const pan = panCardInput.value.trim().toUpperCase();
  const submitBtn = event.target.querySelector('button[type="submit"]');

  // --- Validation ---
  const mobileRegex = /^[6-9]\d{9}$/;
  if (!mobileRegex.test(mobile)) {
    Swal.fire({
      icon: "error",
      title: "Invalid Mobile Number",
      text: "Please enter a valid 10-digit Indian mobile number starting with 6-9.",
    });
    return;
  }

  const panCardRegex = /^[A-Z]{5}\d{4}[A-Z]$/;
  if (!panCardRegex.test(pan)) {
    Swal.fire({
      icon: "error",
      title: "Invalid PAN Card",
      text: "Please enter a valid PAN card number (e.g., ABCDE1234F).",
    });
    return;
  }

  panCardInput.value = pan;


  const formData = new FormData(event.target);
  const getUTMParams = () => {
    const urlParams = new URLSearchParams(window.location.search);
    return {
      utm_source: urlParams.get("utm_source") || "",
      utm_medium: urlParams.get("utm_medium") || "",
      utm_campaign: urlParams.get("utm_campaign") || "",
    };
  };
  const utm = getUTMParams();

  const payLoad = {
    applied_amount: parseInt(formData.get("loanAmount")),
    monthly_salary: parseInt(formData.get("monthlySalary")),
    name: formData.get("fullname"),
    gender_id: parseInt(formData.get("gender")),
    date_of_birth: "NA",
    email: formData.get("email"),
    pan_card: formData.get("panCard").toUpperCase(),
    mobile: parseInt(formData.get("mobile")),
    term_and_condition: 1,
    source: "LENDING RL",
    utm_source: utm.utm_source,
    utm_medium: utm.utm_medium,
    utm_campaign: utm.utm_campaign,
    company_id: 2,
    brand_id: 2,
    product_id: 1,
    applied_tenure: 40,
    state_id: 10,
    city_id: 101,
    pincode: 110011,
  };

  submitBtn.disabled = true;
  Swal.fire({
    title: "Submitting...",
    text: "Please wait while we process your application.",
    allowOutsideClick: false,
    didOpen: () => {
      Swal.showLoading();
    },
  });

  const fetchFormData = async (payload) => {
    try {
      const response = await fetch(
        "https://api.finclouds.tech/api/v1/web/testInsertAPI",
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            "X-CSRF-Token": "e071bcc38951400d817c204f577cc04a",
            Authorization:
              "Bearer ZTkxYjJlNWE5MmMzM2UxOTIxNzFjMTU2YjMwZjhlY2E=",
          },
          body: JSON.stringify(payload),
        }
      );

      if (response.ok) {
        event.target.reset();
          

        submitBtn.innerHTML = "Success!";
        window.location.href = "thank-you.html";
        Swal.fire({
          icon: "success",
          title: "Application Submitted!",
          text: "Thank you for your application! We will get back to you shortly.",
        });
      } else {
        submitBtn.innerHTML = "Try Again";
        submitBtn.disabled = false;
        Swal.fire({
          icon: "error",
          title: "Submission Failed",
          text: "Something went wrong. Please check your details and try again.",
        });
      }
    } catch (err) {
      submitBtn.innerHTML = "Try Again";
      submitBtn.disabled = false;
      Swal.fire({
        icon: "error",
        title: "Network Error",
        text: "A network error occurred. Please check your connection and try again.",
      });
      console.error("Network or script error:", err);
    }
  };

  // API 
  fetchFormData(payLoad);
}

document.getElementById("loanForm").addEventListener("submit", submitForm);
document.getElementById("loanFormcta").addEventListener("submit", submitForm);

// form submission logic end

// Wait for the DOM to be fully loaded before running the script
document.addEventListener("DOMContentLoaded", () => {
  // --- Configuration Arrays ---

  const financialFields = [
    {
      name: "monthlySalary",
      label: "Monthly Salary*",
      type: "number",
      placeholder: "Enter Monthly Salary",
    },
    {
      name: "loanAmount",
      label: "Loan Amount*",
      type: "number",
      placeholder: "Enter Loan Amount",
    },
  ];

  const personalFields = [
    {
      name: "fullname",
      label: "Full Name*",
      type: "text",
      placeholder: "Enter Full Name",
    },
    {
      name: "email",
      label: "Email*",
      type: "email",
      placeholder: "Enter Email",
    },
    {
      name: "mobile",
      label: "Mobile Number*",
      type: "tel",
      placeholder: "Enter Mobile Number",
      maxLength: 10,
    },
    {
      name: "panCard",
      label: "PAN Card*",
      type: "text",
      placeholder: "Enter PAN Card",
      maxLength: 10,
      className: "uppercase",
    },
    {
      name: "gender",
      label: "Gender*",
      type: "select",
      options: [
        { value: "1", label: "Male" },
        { value: "2", label: "Female" },
        // { value: "0", label: "Other" },
      ],
    },
    // {
    //   name: "city",
    //   label: "City*",
    //   type: "select",
    //   options: [
    //     { value: "delhi", label: "Delhi" },
    //     { value: "mumbai", label: "Mumbai" },
    //     { value: "bangalore", label: "Bangalore" },
    //     { value: "chennai", label: "Chennai" },
    //     { value: "kolkata", label: "Kolkata" },
    //   ],
    // },
  ];

  // --- Style Definitions (DRY principle) ---

  const inputBaseStyle =
    "w-full border border-gray-300 rounded px-3 py-2 text-sm sm:text-base focus:outline-none focus:ring-2 focus:ring-[#38773f]";
  const labelBaseStyle = "block mb-1 font-medium text-sm text-gray-700";

  // --- HTML Generation Function ---

  function createFieldHTML(field) {
    const { name, label, type, placeholder, maxLength, className, options } =
      field;

    let fieldHtml;

    if (type === "select") {
      const optionsHtml = options
        .map((opt) => `<option value="${opt.value}">${opt.label}</option>`)
        .join("");
      fieldHtml = `
        <select name="${name}" class="${inputBaseStyle}" required>
          <option value="" disabled selected>Select ${label
            .replace("*", "")
            .trim()}</option>
          ${optionsHtml}
        </select>
      `;
    } else {
      fieldHtml = `
        <input 
          type="${type}" 
          name="${name}"
          class="${inputBaseStyle} ${className || ""}"
          placeholder="${placeholder}"
          ${maxLength ? `maxlength="${maxLength}"` : ""}
          required 
        />
      `;
    }

    return `
      <div>
        <label class="${labelBaseStyle}">${label}</label>
        ${fieldHtml}
      </div>
    `;
  }

  // --- Rendering Logic ---

  // Get the container elements from the DOM
  const financialContainer = document.getElementById(
    "financial-fields-container"
  );
  const personalContainer = document.getElementById(
    "personal-fields-container"
  );

  // Generate HTML by mapping over the arrays and set the innerHTML
  financialContainer.innerHTML = financialFields.map(createFieldHTML).join("");
  personalContainer.innerHTML = personalFields.map(createFieldHTML).join("");
});

//Faq Section
document.addEventListener("DOMContentLoaded", () => {
  // 1. Define all FAQ content in a single, manageable array
  const faqData = [
    {
      question: "What is RupeeLending and How Can It Help You?",
      answer:
        "RupeeLending is a modern, hassle-free platform that simplifies borrowing through a fully digital and paperless system. It connects individuals with trusted NBFCs and banks, providing quick and reliable personal loans tailored to your needs.",
    },
    {
      question: "How is a RupeeLending Loan Different from a Traditional Loan?",
      answer:
        "RupeeLending offers a fast, convenient, and fully digital experience. Unlike traditional methods involving lengthy paperwork and slow approvals, RupeeLending requires minimal documentation and provides instant approvals. With flexible loan amounts and 24/7 online availability, it‚Äôs a seamless and hassle-free solution.",
    },
    {
      question: "Do We Require Any Collateral or Security?",
      answer:
        "Absolutely not! RupeeLending does not require any collateral or security for personal loans. We only need valid documents to verify your eligibility, ensuring a smooth and hassle-free borrowing experience.",
    },
    {
      question: "What Loan Amount Can I Borrow?",
      answer:
        "With RupeeLending, you can borrow from ‚Çπ5,000 to ‚Çπ1,00,000 based on your eligibility and needs.",
    },
    {
      question: "How Do I Repay the Loan?",
      answer:
        "Repaying your loan is simple! You can use UPI or bank transfer for convenient payments. Flexible repayment options make it easy to pay on time without any hassle or stress.",
    },
  ];

  // 2. Get the container element from the DOM
  const container = document.getElementById("faq-container");

  // 3. Generate the HTML using map() and inject it into the container
  if (container) {
    container.innerHTML = faqData
      .map(
        (item) => `
      <details class="bg-white p-4 border border-green-400 rounded-lg shadow group">
        <summary class="font-semibold cursor-pointer list-none flex justify-between items-center">
          ${item.question}
          <span class="transition-transform transform group-open:rotate-180 text-green-600">‚ñº</span>
        </summary>
        <p class="mt-2 text-gray-600">
          ${item.answer}
        </p>
      </details>
    `
      )
      .join("");
  }
});
(function () {
  const header = document.getElementById("topHeader");
  const THRESHOLD = 100;

  function onScroll() {
    if (window.scrollY > THRESHOLD) {
      header.classList.add("headerSticky");
    } else {
      header.classList.remove("headerSticky");
    }
  }

  // Run on load and on scroll
  onScroll();
  window.addEventListener("scroll", onScroll, { passive: true });
})();

// footer 



// end 